name: Maven Package and Release

on:
  release:
    types: [created]  # Se ejecuta cuando se crea un release en GitHub

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Necesario para crear tags y releases
      packages: write  # Necesario para publicar en GitHub Packages

    steps:
    # Paso 1: Checkout del código
    - uses: actions/checkout@v4

    # Paso 2: Configurar JDK 21
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        server-id: github  # Este valor depende de tu configuración en pom.xml
        settings-path: ${{ github.workspace }}  # Ubicación de settings.xml

    # Paso 3: Crear un tag con la versión del release
    - name: Create a tag for the release
      run: |
        git tag -a "v${{ github.event.release.tag_name }}" -m "Release version ${{ github.event.release.tag_name }}"
        git push origin "v${{ github.event.release.tag_name }}"

    # Paso 4: Construir el proyecto con Maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # Paso 5: Mover el archivo .jar a la carpeta releases/
    - name: Move JAR to releases folder
      run: |
        mkdir -p releases
        mv target/*.jar releases/

    # Paso 6: Hacer commit de la carpeta releases/ con el archivo .jar
    - name: Commit the JAR file to the repository
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add releases/*.jar
        git commit -m "Add JAR file for release ${{ github.event.release.tag_name }}"
        git push origin ${{ github.ref }}

    # Paso 7: Subir el archivo .jar como Release en GitHub
    - name: Upload JAR to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: releases/*.jar  # Subir desde la carpeta releases/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Usamos el token de GitHub para la autenticación
